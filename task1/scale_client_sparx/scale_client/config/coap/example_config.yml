# This configuration spins up a client with dummy sensors
# It exposes a CoAP server as an event_sink and as a sensor
# so you can do GET/PUT/OBSERVE etc.

# Example test scenarios:
# Run one client with the CoapEventSink configured local-only to
# store one of the dummy sensors' data.  Run a second client
# configured with the CoapSensor so it will 'observe' the first
# client's data.  Then you can run the first with its 'remote'
# option enabled and the second with a CoapEventSink as well.
# This will cause the first client to directly upload its
# SensedEvents

# Second test scenario:
# Client 1: CoapServer only
# Client 2: dummy sensors and RemoteCoapEventSink pointed at Client 1
# Client 3: CoapSensor pointed at Client 1
# With a proper configuration (you may need to do --log-level debug,
# you should see the events originating from Client 2 show up on Client 3.

# WARNING: if you enable the local coap sink, server, dummy sensors, and coap VS
# all at the same time, there seems to still be a bug where some threads will hang
# when the program exits...

EventSinks:
    CoapEventSink:
      class: "local_coap_event_sink.LocalCoapEventSink"
      # NOTE: we currently don't support longer hierarchical paths such as 'scale/events/temp'
      # We'll probably need to add each layer one at a time to do that...
      topic: "/events/%s"
      ### All remote version params below here
#      class: "remote_coap_event_sink.RemoteCoapEventSink"
      ## Can specify the source port we use in the client; note that we seem to be able to have multiple clients use the
      ## same src_port, which is useful for configuring them to treat different topics differently e.g. NON vs. CON
      # src_port: 9999
      # set this parameter to false for best-effort messages (CoAP non-CONfirmable messages)
      # confirmable_messages: False
      ## Name of CoapServer for local version to store events in
#      server_name: "default"
      # Use defaults for the REMOTE event sink testing if you run the server locally
      # e.g. by running the coapthon coapservery.py in which case use the following topic:
      # topic: "/storage/%s"
      ## Remote server params
      # hostname: "127.0.0.1"
      # port: DEFAULT_COAP_PORT
      # username: None
      # password: None
      # timeout: 60

Networks:
    CoapServer:
      class: "coap_server.CoapServer"
      # By specifying this option, the server will create a root resource at this URI path
      # such that other external nodes can POST/PUT resources under this path e.g. /events/temperature
      # They will be published internally so that other apps may make use of them.
      events_root: "/events/"
      # Change this name if you want to run more than one CoapServer
      # server_name: "default"
      # hostname: "127.0.0.1"
      # port: DEFAULT_COAP_PORT
      # multicast: True

Sensors:
    DummyThreadedSensor:
      class: "dummy.dummy_threaded_sensor.DummyThreadedSensor"
      interval: 1
    DummyTempSensor:
      class: "dummy.dummy_temperature_physical_sensor.DummyTemperaturePhysicalSensor"
      device: "temp0"
      interval: 2
    # This VS observes the given topics and internally publishes them as SensedEvents.
    # NOTE: Careful having both a RemoteCoapEventSink and CoapSensor
    # running simultaneously and pointing to the same server-resource.  We have a hack
    # in place, but if it changes you could create a loop!
    CoapSensor:
      class: "network.coap_sensor.CoapSensor"
      subscriptions: ["/events/temperature"]
      # For testing, we set a shorter timeout since that's used for
      # re-trying an observe if the resource doesn't exist initially.
      timeout: 4
      # Enables polling at the regular VirtualSensor sample_interval rather than 'observe' feature.
#      use_polling: True
      # Use defaults for testing since we're running the server locally:
      # hostname: "127.0.0.1"
      # port: DEFAULT_COAP_PORT
      # username: None
      # password: None
      # timeout: 300
